name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install flake8
      - name: Lint backend
        run: flake8 backend
      - name: Backend tests
        run: pytest -q
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Frontend deps
        working-directory: frontend
        run: npm ci
      - name: Frontend tests
        working-directory: frontend
        run: npm test -- --watchAll=false

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest
      - uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest
      - uses: docker/build-push-action@v6
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare deploy artifacts (.env and compose)
        id: prep
        run: |
          set -e
          mkdir -p deploy_artifacts
          # .env
          {
            echo "POSTGRES_USER=postgres_kittygram_user"
            echo "POSTGRES_PASSWORD=postgres_kittygram_password"
            echo "POSTGRES_DB=kittygram"
            echo "DB_NAME=kittygram"
            echo "DB_HOST=db"
            echo "DB_PORT=5432"
            echo "DEBUG=False"
            echo "ALLOWED_HOSTS=${{ secrets.SSH_HOST }},127.0.0.1,localhost"
            echo "EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend"
            echo "DEFAULT_FROM_EMAIL=noreply@example.com"
            python3 -c "import secrets; print('SECRET_KEY='+secrets.token_urlsafe(64))"
          } > deploy_artifacts/.env
          # docker-compose.yml из шаблона
          sed "s|__DOCKER_USER__|${{ secrets.DOCKER_USERNAME }}|g" deploy/docker-compose.yml > deploy_artifacts/docker-compose.yml
          ls -la deploy_artifacts

      - name: Upload artifacts to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy_artifacts/.env,deploy_artifacts/docker-compose.yml"
          target: "~/kittygram"
          strip_components: 1

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            mkdir -p ~/kittygram
            cd ~/kittygram
            docker compose pull
            docker compose up -d --force-recreate
            docker compose exec -T backend python manage.py migrate
            docker compose exec -T backend python manage.py collectstatic --noinput
            docker compose ps

  post_deploy_tests:
    needs: deploy
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install deps and run tests
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pytest -q
      - name: Telegram notify
        if: ${{ success() && env.TELEGRAM_TOKEN != '' && env.TELEGRAM_TO != '' }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_TO}" -d text="Kittygram deploy OK: ${{ secrets.SSH_HOST }}" >/dev/null
