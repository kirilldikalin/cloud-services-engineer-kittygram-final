name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Backend deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install flake8
      - name: Lint backend
        run: flake8 backend

      - name: Backend tests
        run: pytest -q

      - name: Frontend Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Frontend deps
        working-directory: frontend
        run: npm ci
      - name: Frontend tests
        working-directory: frontend
        run: npm test -- --watchAll=false

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build&Push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

      - name: Build&Push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

      - name: Build&Push gateway
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd ~/kittygram
            # если файл называется docker-compose.production.yml, используем его
            if [ -f docker-compose.production.yml ]; then F="-f docker-compose.production.yml"; else F=""; fi
            docker compose $F pull
            docker compose $F up -d --force-recreate
            docker compose $F exec -T backend python manage.py migrate
            docker compose $F exec -T backend python manage.py collectstatic --noinput
            docker compose $F ps

  post_deploy_tests:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Python setup
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install deps and run tests against prod
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pytest -q
      - name: Telegram notify
        if: ${{ success() && secrets.TELEGRAM_TOKEN != '' && secrets.TELEGRAM_TO != '' }}
        run: |
          MSG="Kittygram deploy OK: ${{ secrets.SSH_HOST }}"
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_TO }}" -d text="$MSG" >/dev/null
