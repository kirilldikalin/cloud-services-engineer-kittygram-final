name: Terraform
on:
  workflow_dispatch:
    inputs:
      action:
        description: Select the Terraform action
        required: true
        default: plan
        type: choice
        options: [plan, apply, destroy]

jobs:
  tf:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Debug raw SA key length
        env:
          SA_JSON: ${{ secrets.YC_SA_JSON_RAW }}
        run: python3 -c "import os; s=os.environ.get('SA_JSON',''); print('len_raw=',len(s))"

      - name: Write SA key file
        env:
          SA_JSON: ${{ secrets.YC_SA_JSON_RAW }}
        run: |
          python3 - <<'PY'
          import os, json, sys
          s = os.environ.get('SA_JSON','')
          if not s.strip():
              sys.exit('YC_SA_JSON_RAW is empty')
          try:
              json.loads(s)
          except Exception as e:
              sys.exit(f'bad json in YC_SA_JSON_RAW: {e}')
          open('authorized_key.json','wb').write(s.encode())
          print('json_len=', len(s))
          PY

      - name: Terraform Init
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: >
          terraform init -input=false
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
          -backend-config="key=tf-state.tfstate"
          -backend-config="endpoint=https://storage.yandexcloud.net"
          -backend-config="region=us-east-1"
          -backend-config="use_path_style=true"
          -backend-config="access_key=$ACCESS_KEY"
          -backend-config="secret_key=$SECRET_KEY"

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_vm_ssh_user: ${{ secrets.SSH_USER }}
          TF_VAR_vm_ssh_pubkey: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_sa_key_file: authorized_key.json
        run: terraform plan -input=false

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_vm_ssh_user: ${{ secrets.SSH_USER }}
          TF_VAR_vm_ssh_pubkey: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_sa_key_file: authorized_key.json
        run: terraform apply -auto-approve -input=false

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
          TF_VAR_cloud_id: ${{ secrets.YC_CLOUD_ID }}
          TF_VAR_folder_id: ${{ secrets.YC_FOLDER_ID }}
          TF_VAR_vm_ssh_user: ${{ secrets.SSH_USER }}
          TF_VAR_vm_ssh_pubkey: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_sa_key_file: authorized_key.json
        run: terraform destroy -auto-approve -input=false
